public class TrappingRainWater {
    public static int trappedWater(int[] heights) {
        int n = heights.length;
        if (n == 0) return 0;
        
        // Arrays to store the maximum height on the left and right of each bar
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];
        
        // Fill the leftMax array
        leftMax[0] = heights[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i-1], heights[i]);
        }
        
        // Fill the rightMax array
        rightMax[n-1] = heights[n-1];
        for (int i = n-2; i >= 0; i--) {
            rightMax[i] = Math.max(rightMax[i+1], heights[i]);
        }
        
        // Calculate the trapped water
        int totalWater = 0;
        for (int i = 0; i < n; i++) {
            totalWater += Math.min(leftMax[i], rightMax[i]) - heights[i];
        }
        
        return totalWater;
    }

    public static void main(String[] args) {
        int[] heights = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
        System.out.println("Trapped water: " + trappedWater(heights));  // Output: 6
    }
}


OPTIMIZED APPROCH:-
public class TrappingRainWater {
    public static int trappedWaterOptimized(int[] heights) {
        int n = heights.length;
        if (n == 0) return 0;
        
        // Initialize pointers and max heights
        int left = 0, right = n - 1;
        int leftMax = heights[left], rightMax = heights[right];
        int totalWater = 0;
        
        // Traverse from both ends towards the center
        while (left <= right) {
            if (leftMax <= rightMax) {
                if (heights[left] < leftMax) {
                    totalWater += leftMax - heights[left];
                } else {
                    leftMax = heights[left];
                }
                left++;
            } else {
                if (heights[right] < rightMax) {
                    totalWater += rightMax - heights[right];
                } else {
                    rightMax = heights[right];
                }
                right--;
            }
        }
        
        return totalWater;
    }

    public static void main(String[] args) {
        int[] heights = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
        System.out.println("Optimized trapped water: " + trappedWaterOptimized(heights));  // Output: 6
    }
}
