public class TwoStacks {
    int[] arr;
    int top1, top2;
    int size;

    // Constructor to initialize the array
    public TwoStacks(int size) {
        this.size = size;
        arr = new int[size];
        top1 = -1; // Stack 1 starts from the beginning of the array
        top2 = size; // Stack 2 starts from the end of the array
    }

    // Push operation for Stack 1
    public void push1(int value) {
        if (top1 + 1 == top2) {
            System.out.println("Stack Overflow! No space available.");
            return;
        }
        arr[++top1] = value;
    }

    // Push operation for Stack 2
    public void push2(int value) {
        if (top1 + 1 == top2) {
            System.out.println("Stack Overflow! No space available.");
            return;
        }
        arr[--top2] = value;
    }

    // Pop operation for Stack 1
    public int pop1() {
        if (top1 == -1) {
            System.out.println("Stack 1 is Empty!");
            return -1; // Return a sentinel value indicating an empty stack
        }
        return arr[top1--];
    }

    // Pop operation for Stack 2
    public int pop2() {
        if (top2 == size) {
            System.out.println("Stack 2 is Empty!");
            return -1; // Return a sentinel value indicating an empty stack
        }
        return arr[top2++];
    }

    // Peek operation for Stack 1
    public int peek1() {
        if (top1 == -1) {
            System.out.println("Stack 1 is Empty!");
            return -1;
        }
        return arr[top1];
    }

    // Peek operation for Stack 2
    public int peek2() {
        if (top2 == size) {
            System.out.println("Stack 2 is Empty!");
            return -1;
        }
        return arr[top2];
    }

    // Helper function to print Stack 1
    public void printStack1() {
        for (int i = 0; i <= top1; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    // Helper function to print Stack 2
    public void printStack2() {
        for (int i = size - 1; i >= top2; i--) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Initialize the two stacks in a single array of size 5
        TwoStacks stacks = new TwoStacks(5);

        // Push some elements into Stack 1
        stacks.push1(10);
        stacks.push1(20);
        stacks.push1(30);

        // Push some elements into Stack 2
        stacks.push2(40);
        stacks.push2(50);

        // Print both stacks
        System.out.println("Stack 1:");
        stacks.printStack1();
        System.out.println("Stack 2:");
        stacks.printStack2();

        // Pop an element from Stack 1
        System.out.println("Popped from Stack 1: " + stacks.pop1());

        // Pop an element from Stack 2
        System.out.println("Popped from Stack 2: " + stacks.pop2());

        // Peek into both stacks
        System.out.println("Top of Stack 1: " + stacks.peek1());
        System.out.println("Top of Stack 2: " + stacks.peek2());
    }
}
